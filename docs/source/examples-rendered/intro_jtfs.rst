
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples-rendered\intro_jtfs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples-rendered_intro_jtfs.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples-rendered_intro_jtfs.py:


Joint Time-Frequency Scattering Introductory Example
====================================================
  1. Transform a trumpet signal
  2. Visualize coefficients
  3. Normalize coefficients
  4. Feed to simple PyTorch 1D CNN

.. GENERATED FROM PYTHON SOURCE LINES 18-20

Import the necessary packages
-----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 20-28

.. code-block:: default


    import numpy as np
    import torch
    import torch.nn as nn
    from wavespin import TimeFrequencyScattering1D
    from wavespin.visuals import viz_jtfs_2d
    from wavespin.toolkit import normalize








.. GENERATED FROM PYTHON SOURCE LINES 29-33

Generate trumpet and create scattering object
---------------------------------------------
Load trumpet, duration 2.5 seconds (sampling rate, fs=22050)
generated via `librosa.load(librosa.ex('trumpet'))[0][:int(2.5*22050)]`

.. GENERATED FROM PYTHON SOURCE LINES 33-63

.. code-block:: default

    x = np.load('librosa_trumpet.npy')[:2048]
    N = x.shape[-1]

    # 10 temporal octaves
    J = 9
    # 8 bandpass wavelets per octave
    # J*Q ~= 144 total temporal coefficients in first-order scattering
    Q = 8
    # scale of temporal invariance, .93 ms (2**11 [samples] / fs [samples/sec])
    T = 2**7
    # 4 frequential octaves
    J_fr = 4
    # 2 bandpass wavelets per octave
    Q_fr = 1
    # scale of frequential invariance, F/Q == 0.5 cycle per octave
    F = 16
    # average to reduce transform size and impose freq transposition invariance
    average_fr = True
    # return packed as dict keyed by pair names for easy inspection
    out_type = 'dict:array'
    # exclude low-energy coefficients (generally uninformative); smallest `j2` also
    # take longest to compute
    paths_exclude = {'j2': 1}

    configs = dict(J=J, shape=N, Q=Q, T=T, J_fr=J_fr, Q_fr=Q_fr, F=F,
                   average_fr=average_fr, out_type=out_type,
                   paths_exclude=paths_exclude,
                   max_pad_factor=0, max_pad_factor_fr=0)
    jtfs = TimeFrequencyScattering1D(**configs, frontend='numpy')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    D:\Anaconda\envs\jgpu-env\lib\site-packages\wavespin\scattering1d\frontend\base_frontend.py:196: UserWarning: Boundary effects and filter distortion expected per insufficient temporal padding; recommended higher `max_pad_factor` or lower `J` or `T`.
      warnings.warn(f"{extent_txt} effects and filter distortion "




.. GENERATED FROM PYTHON SOURCE LINES 64-66

Scatter
-------

.. GENERATED FROM PYTHON SOURCE LINES 66-72

.. code-block:: default

    Scx = jtfs(x)

    # print pairs and shapes
    for pair, c in Scx.items():
        print(c.shape, '--', pair)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (1, 1, 16) -- S0
    (1, 61, 16) -- S1
    (1, 4, 16) -- phi_t * phi_f
    (1, 24, 16) -- phi_t * psi_f
    (1, 23, 16) -- psi_t * phi_f
    (1, 132, 16) -- psi_t * psi_f_up
    (1, 132, 16) -- psi_t * psi_f_dn




.. GENERATED FROM PYTHON SOURCE LINES 73-75

Visualize
---------

.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: default

    viz_jtfs_2d(jtfs, Scx, viz_coeffs=1, viz_filterbank=0, fs=22050/2)




.. image-sg:: /examples-rendered/images/sphx_glr_intro_jtfs_001.png
   :alt: JTFS coefficients
   :srcset: /examples-rendered/images/sphx_glr_intro_jtfs_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-81

Feed to simple 1D conv-net
--------------------------
Minimal network

.. GENERATED FROM PYTHON SOURCE LINES 81-118

.. code-block:: default

    class Net(nn.Module):
        def __init__(self, n_channels):
            super().__init__()
            self.conv = nn.Conv1d(n_channels, out_channels=32, kernel_size=3)
            self.pool = nn.AdaptiveAvgPool1d(1)  # global avg
            self.fc   = nn.Linear(32, 2)  # e.g. binary classification

        def forward(self, x):
            x = self.pool(self.conv(x)).squeeze(-1)  # drop time dim
            return self.fc(x)

    # reinitialize in torch backend
    configs['out_type'] = 'array'  # pack everything into one tensor
    sct = TimeFrequencyScattering1D(**configs, frontend='torch')
    xt = torch.from_numpy(x)
    Scx = sct(xt).squeeze(0)[None]  # ensure there is batch dim

    # drop zeroth-order, generally uninformative for audio
    Scx = Scx[:, 1:]
    # channel-norm (mu=None) for 1D convs (axes=-1), log norm (log1p)
    Scx = normalize(Scx, mu=None, std_axis=-1, mean_axis=-1)
    # print stats
    print("{:.1f}, {:.1f} -- mean, std".format(Scx.mean(), Scx.std()))

    # initialize network
    n_paths = Scx.shape[1]
    net = Net(n_paths)

    # get outputs, backprop
    out = net(Scx)
    loss = out.mean()
    loss.backward()

    # confirm gradients
    g = net.conv.weight.grad
    print(g.shape, "-- Conv1D weights grad shape")
    print(torch.abs(g).mean(), "-- Conv1D weights grad absolute mean")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    D:\Anaconda\envs\jgpu-env\lib\site-packages\wavespin\scattering1d\frontend\base_frontend.py:196: UserWarning: Boundary effects and filter distortion expected per insufficient temporal padding; recommended higher `max_pad_factor` or lower `J` or `T`.
      warnings.warn(f"{extent_txt} effects and filter distortion "
    0.0, 1.0 -- mean, std
    torch.Size([32, 376, 3]) -- Conv1D weights grad shape
    tensor(0.0066) -- Conv1D weights grad absolute mean





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.397 seconds)


.. _sphx_glr_download_examples-rendered_intro_jtfs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: intro_jtfs.py <intro_jtfs.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: intro_jtfs.ipynb <intro_jtfs.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
